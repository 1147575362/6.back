1、课程计划
    内容
        C++、Qt
    时间
        3周、1周左右
    要具备的基础
        标准C语言、数据结构、Linux系统编程
    目标
        熟悉标准C++语言
        C++标准库 及 Qt库 
        良好的编码习惯
        学会用编程语言表达自己的思想


2、简介
    历史
        1979年，本贾尼-斯特劳斯特卢普 在C语言的基础上引入了当时其它编程语言的特性，设计了一门新的编程语言
        最初称为 带类的C语言(C With Class), 1984年，正式命名为 C  plus plus .
        也就是说 C++完全兼容C语言，C语言中的特性在C＋＋中都可以直接使用。
        

    标准 
        1998年 发布了98标准 (1.0)
        2003年 发布了03标准
        2011年 发布了11标准 (2.0)
        2014
        2017
        2020
        ...

    编译器 
        Ubuntu中， 使用GCC中的 g++, 安装方式
            sudo apt install g++ 

        arm-linux中， 使用的是 arm-linux-g++

        windows中使用 集成开发环境(IDE) visual studio 20xx


3、第一个C++程序
    #include <iostream>
    int main()
    {
        std::cout << "hello world" << std::endl;
        return 0;
    }
    说明：
        1、标准C++中的头文件，没有扩展名，如果是自己编写的头文件或者第三方的头文件，一般还是有.h或.hpp 这种后缀的
            C语言中所有的头文件及Linux系统中的那些头文件都可以直接使用
        
        2、std 是标准C++中定义的一个作用域的名字，称为namespace(命名空间/名字空间)
            标准C++库中所有的名字，都定义于此空间
        
        3、:: 称为作用域运算符，一般情况下，它左边是一个作用域的名字，它右边是该作用域中的某个成员的名字

        4、cout (see-out)  console output 称为标准输出流对象，类似于之前的 stdout
            标准IO流对象
                cin     标准输入流对象
                cout    标准输出流对象
                cerr    标准错误流对象
                clog    标准错误流对象(带缓冲区)

        5、<< 是左移运算符，同时也称为输出运算符，配合cout使用   
            >> 是右移运算符，同时也称为输入运算符，配合cin使用

        6、endl 即 end line ,类似于 \n

4、命名空间 namespace 
    namespace本质上是一个作用域，用来存放各种名字，如变量名、函数名、类型名、对象名、名字空间名...
    namespace主要用来解决名字冲突的问题，同时一个名字空间被看作一个逻辑单元，在用户看来，它们是一个整体
    定义：
        namespace 名字空间名称
        {
            各种名字定义
        }
        同一个作用域中的名字可以相互直接访问，但如果是从名字空间外部访问它内部的成员，则需要专门的访问方式：
        1、显示限定
            名字空间名称::成员名字 
            例： 
                std::cout 
                std::endl

        2、using 声明
            using 名字空间名称::成员名字;
            例： 
            using std::cout;
            cout << "hello";
            cout << "world";

        3、using指示
            using namespace 名字空间名称;
            例： 
            using namespace std;
            注：在头文件中请避免使用此方式

    注： 
        名字空间其实是切分了全局作用域，名字空间中的成员还是全局的
        全局作用域也可理解为一个名字空间，但这个名字空间没有名字
        全局名字空间中成员的典型使用方式如下：
            ::全局标识符
        例： 
            ::open("1.c",  O_RDONLY);
    

--------------------------------------------------------------------------    
数据类型
1、布尔类型 bool
    bool类型是C++的基础类型之一，用于表达逻辑概念：
        零为假，非零即为真
    在C++中，用false表示假，用true表示真

    主要用于条件判断 和 函数返回
    例：
        bool isDigit(char c)
        {
            if (c >= '0' and c <= '9')
                return true;
            return false;
        }
    
        char c = '1';
        bool ok = isDigit(c);
        if (ok) // 判断条件成立
        {
            cout << c << " is digit " << endl;
        }
        if (!ok) // 判断条件不成立
        {
            cout << c << "is not a digit " << endl;
        }
    使用bool类型的好处：
        程序的可读性更好
        空间利用率更高   sizeof(bool) == 1


    
2、引用 reference
    引用 是一个已存在对象的别名。
    格式：
        类型名 & 引用名 = 对象名;
    例： 
        int a = 1;
        int & r = a; // r是a的一个别名，r就是a, a就是r

    说明： 
        1、引用定义时，必须初始化
        2、引用一旦绑定成功，就不能再成为其他对象的别名
        3、对引用进行的任何操作，都是在操作与之绑定的那个对象

    引用主要用于函数传参和函数返回
    void foo(int& x) 
    {
        x++;
    }

    int& bar(int& y)
    {
        y++;
        return y;
    }

    引用优点：
        代码可读性更好
        效率更高

    练习：
        请写一个swap()函数，用于交换两个整型变量的值
        请使用三种传参方式
            传值 
            传地址
            传引用
    

    引用分类
        常规引用(左值引用)：只能绑定到左值的引用
            类型名 & 引用 = 对象名;
        const引用: 既能绑定到左值，也能绑定到右值
            const 类型名 & 引用 = 对象名;

        例： 
        void foo(int & r)
        {
            r++; // OK 
        }
        void bar(const int& r)
        {
            // r++; // error
        }

        int a = 1;
        foo(a); // ok 
        foo(1); // error 
        bar(a); // ok 
        bar(1); // ok 

    注： 
        C++11中还增加了一种右值引用，下回分解。


3、结构、联合、枚举
    C++中，联合体(共用体)使用方式与C相同，仅使用时略微方便一点点
    例： 
        union A 
        {
            int a;
            char c;
        };
        union A a;  // C语言中必须带上关键字
        A a;        // C++中，用类型定义变量时，可以省略关键字，结构与枚举类似

    联合体在上层应用程序中几乎不用，但在笔试题中非常见，尤其是与大小端结合，进行考察。
    请写一个简单的C程序，判断当前系统是大端还是小端模式？


    C++中，枚举使用方式与C相同，使用时略微方便一点点，同时还引入范围枚举的概念。
    例： 
        enum class Color {RED=0xff0000, GREEN=0x00ff00, BLUE=0x0000ff};
        enum class Warning {RED, BLUE};

        Color color;
        color = Color::RED; // 


    C++中，结构使用方式与C相同，使用时略微方便一点点，同时允许结构中定义函数
    例： 
        struct Student
        {
            int id;
            char name[20];

            void sleep() {}
            void study() {}
            void play() {}
        };

        Student s1;
        s1.id = 1001;
        strcpy(s1.name, "zhangfei");
        s1.sleep();
    


    作业：
        1、指针与引用有什么区别
        2、预习C++中的字符串类型
        3、复习文件IO及开发板相关知识点




4、字符串类型 string 
    在C++标准库中，提供了一种类型：string， 专门用来描述字符串
    使用方式： 
        1、包含头文件
        #include <string>

        2、定义变量
            std::string s1; // s1就是一个空串
            std::string s2 = "hello"; // 定义变量同时初始化

        3、常用接口
            size()      // 计算字符串的长度，不包括\0
                s1.size() => 0
                s2.size() => 5
            empty()     // 判空，如果为空，返回true,否则返回false
                s1.empty()  => true 
                s2.empty()  => false 
            at()        // 获取指定位置的字符, 会检测下标是否越界，如果越界，异常结束
                s2.at(0)    => 'h'
            c_str()     // 把std::string转换成 const char*
                open(s2.c_str(), O_RDONLY);
        
        4、支持以下运算符
            =   +   +=   ==  !=   > >=   < <=    >>   <<   []
            

    练习： 
        写一个函数，接收一个密码字符串，判断其是否符合要求：
            长度大于等于6
            包含数字
            包含小写字母
            包含大写字母            



------------------------------------------------------------------------------------------------------
函数
1、函数重载 overload
    所谓函数重载，指允许在相同的作用域中，定义函数名相同，但是参数列表不相同的函数。
    例： 
        void swap(int* p1, int* p2) {}
        void swap(int& r1, int& r2) {}
        void swap(string& s1, string& s2) {}

    注：函数重载中的参数列表不相同，指参数类型或个数或顺序，只要有一点点不相同就行，与形参名无关
        同时，函数重载与返回类型无关
    例： 
        int sum(int a, int b);
        int sum(int a, int b, int c);
        int sum(int a, char c);
        int sum(char c, int a);

    函数重载的实现原理：
        在C++中，除了main函数，其他所有的函数名都会被编译器修改掉。
        C++编译器会在函数名后面添加参数的类型信息，使得那些重载函数的名字最终是不一样的。
        例： 
            int sum(int a, int b); 被编译器处理后，函数名可能是：
                sum_int_int
                sumii


    extern "C" 关键字
        extern "C"称为链接指示，用于告诉C++编译器，按照C语言的规则去链接指定的函数
        例： 
            假设有C语言编写的程序模块 test, 其中有 函数如 
            int sub(int a, int b);
            需要支持C和C++两种调用方式，则需要在模块的头文件(test.h)中进行说明：

            #ifdef __cplusplus
            extern "C"
            {
            #endif

                int sub(int, int);  // 函数声明

            #ifdef __cplusplus
            }
            #endif

        注： 
            __cplusplus 这是一个C++编译器内置的宏，一般用于区分不同的编译器
            用extern "C"修饰的函数，不能重载。

    练习：
        编写test模块
        用C和C++分别调用该模块中的函数

2、默认参数 default argument
    C++中，在函数声明时，可以给形参设置默认值，当调用这种带有默认参数的函数时，可以不给这些参数传递实参
    这些参数自动使用声明时设置的那个值
    例：
        int pow(int x);
        int pow(int x, int n);

        => 
        int pow(int x, int n=2);
        pow(2) => pow(2,2)
        pow(2,3) => pow(2,3)

    注： 
        如果函数的声明与定义分开，则默认值只能设置在函数声明处！！
        如果某个形参设置了默认值，则它右边所有的形参都必须设置默认值。 


    
3、内联  inline 
    用inline 说明的函数，称为内联函数
    inline 的本意是用于[建议]编译器，用内联函数体来 替代 对该函数的调用
    以避免函数调用的开销，从而提高程序的执行效率
    例： 
        inline int max(int a, int b)
        {
            return a>b?a:b;
        }

        int main()
        {
            int a, b;
            max(a,b);   =>  a>b?a:b
        }
    由于inline函数体可能被复制多次，因此最终生成的可执行文件可能会变大。
    现在inline更多的是用于表达一个函数可以被定义多次，只要每个定义出现在不同的翻译单元且所有的定义等同即可。
    如在头文件中定义一个函数，被包含到不同的源文件中。

    注：在class或struct内部定义的函数，默认为内联函数。

    







        





        




    


    
    








