//静态成员变量
//用static修饰静态成员变量，此变量用于存多个对象都共用的成员变量，如银行利率、圆周率等
/*
静态成员
    用static修饰的成员，称为静态成员
    静态成员分两种：
        静态成员变量
        静态成员函数
    静态成员主要用于同类型的对象之间的数据共享
    例：每个用户都有一个银行账号，账号存储了一些信息，如姓名、金额...
        但是存款的利率信息却没有必要每个用户都存储一份，而只需要存储一份，然后所有的账号共享即可

    格式：
        class 类名 
        {
        public:
            static 返回类型 函数名(参数列表) // 静态成员函数
            {
                // 函数体
            }
        private:
            static 类型名 对象名; // 静态成员变量
        };

    特点：
        静态成员不属于某个对象(即没有存储在对象空间中)，而是属于类型的，但同类型的所有对象都可以访问静态成员
        ※静态成员变量 必须 在类外 初始化，如下：
            类型名 类名::静态成员变量名 = 初始值;
            或 类型名 类名::静态成员变量名{初始值};
        
        静态成员函数同样不属于(依赖)对象，但是对象可以调用静态成员函数
        静态成员函数的调用方式：
            1、类名::静态成员函数名(参数列表);
            2、对象名.静态成员函数名(参数列表); // 对象指针->静态成员函数名(参数列表)
        ※静态成员函数不能访问非静态的成员变量(但非静态的成员函数，可以访问静态成员变量)
        ※静态成员函数中没有this!!!
        */
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

class St
{
public:
    St()
    {
        cout << "gouzao" << endl;
        n++;
    }

    static int num();   
private:
    static int n;   
};

int St::n = 0;  //静态成员变量必须在类外初始化

int St::num()  //非静态的成员函数，可以访问静态成员变量，但静态成员函数不能访问非静态的成员变量
{
    return n; //静态成员函数不能用this指针 this->n是错的
}

int main(int argc, char const *argv[])
{
    St a;
    St b;
    St c;
    cout << a.num() << endl; //统计该类型当前对象的数量
    return 0;
}
