C++是一种通用的编程语言，支持多种编程思想：
    面向过程
    面向对象
    泛型编程

例： 
    class List
    {};
    我们之前写的链表类型，要么只能存放整数，要么只能存放字符串
    链表是一种通用的概念，不应该局限于某种特定的类型
    当编写自定义的数据结构时，如果描述的是它们的通用特性，如数组的地址空间连续、可随机访问等
    而与它们存储的数据类型 没有关系，即 独立于特定的数据类型。
    那么 编写这种独立于某种特定类型的通用代码，就称为泛型编程。


模板
    C++中用模板来实现泛型思想，或者说 用模板来描述那些通用的概念。
    根据功能，模板可分为：
        函数模板
        类模板

    模板 允许在定义函数或类时，将某种特定类型做为参数(类型参数化)

函数模板
    函数模板不是函数，而用来生成函数的模板
    语法格式：
    template<typename T1, ..., typename Tn>
    返回类型 函数名(参数列表)
    {
        函数体
    }    

    例： 
    定义函数模板
    template<typename T>
    T sum(T a, T b)
    {
        return a+b;
    }
    使用函数模板
    sum(1,2);  
    说明： 
        编译器会自动根据参数推导其类型，
        然后这个推出来的类型做为参数，传递给函数模板，
        生成相应的具体的函数，
        最后再调用这个自动生成的函数  // int sum(int a, int b) {}
    

    练习： 
        写一个函数模板，计算两个对象中的最大值
        写一个函数模板，计算两个对象中的最小值

        写一个函数模板，从一个数组中查找指定的值
        int a[5] = {1,2,3,4,5};
        double b[5] = {1.1,2.2,3.3,4.4,5.5};


    注：
        一般情况下，在使用函数模板时，编译器能根据实参推导其类型
        在某些情况下，编译器可能无法推导需要的类型，此时，可以显式的指定模板参数：
        
        函数名<模板参数列表>(函数参数列表)
        例： 
        cout << div<int, double>(1,2) << endl;

        即使编译器能自动推导，用户也可以显式的指定模板参数。


        模板特化 就是通用模板的一个特殊的定义，它的模板参数是确定的，一般形式如下：
        template<>
        返回类型 函数名(参数列表)
        {
            函数体
        }
        例： 
        // 通用模板
        template <typename T>
        int compare(T a, T b)
        {
            if (a < b)
                return -1;
            if (b < a)
                return 1;
            return 0;
        }

        // 模板特化
        template<>
        int compare(const char* a, const char* b)
        {
            if (strcmp(a, b) > 0)
                return 1;
            if (strcmp(a, b) < 0)
                return -1;
            return 0;
        }
        模板特化要求，先有通用版本，再写特殊版本。

        typename 关键字用来说明它后面的那个标识符是一个类型的名字，也可以使用class
        模板的声明与定义必须在同一个文件中，一般是全部写在头文件中。


    练习： 
        写一个函数模板，用于给一个数组升序排序
        例： 
        int a[5] = {10,2,3,4,5};
        sort(a, 5);
        要求，把交换两个对象的过程，用模板实现。
        Student stus[3] = {Student("zhangfei", 80),Student("guanyu", 90), Student("liubei", 85)};
        sort(stus, 3);


        实现三参数的冒泡排序算法
        写一个函数模板，从一个给定的数组中，查找第一个满足某个条件的值
            条件：如是不是奇数，是不是偶数，是不是大于100



类模板 
    类模板不是类，是用来生来类的模板
    template<typename T1, ..., typename Tn>
    class 类名 
    {
        类的定义
    }; 

    例： 
    template<typename T>
    class SeqStack
    {
    public:
        SeqStack();
        ~SeqStack();
        void push(T value);
        void pop();
        bool empty();
        T get_top();
    private:
        T data[10];
        int top;
    };

    SeqStack<int> s1;
    SeqStack<double> s2;
    SeqStack<string> s3;

    当使用类模板实例化对象时，必须显式的指定模板参数。
    类模板的声明与定义只能在一个文件中。


作业：
    写一个类模板，实现动态数组的功能
    class DynamicArray
    {
    public:
        DynamicArray();
        void push_back(T value); // 自动扩容
        void pop_back();
        int size() const;
        bool empty() const;
        ...
    };
    int main()
    {
        DynamicArray<int> da; // 空的数组
        da.push_back(1); // 添加
        ...
        for (auto it = da.begin(); it != da.end(); ++it)
        {
            cout << *it << endl;
        }

        for (int i = 0; i < da.size(); i++)
        {
            cout << da[i] << endl;
            cout << da.at(i) << endl;
        }
    }



--------------------------------------------------
标准模板库 Standard Template Library - STL
    STL是C++标准库的重要组成部分
    STL由多个组件组成：
        容器、算法、迭代器、适配器、分配器、函数对象

    容器 Container
        指用类模板实现的常见的数据结构，如数组、链表、栈、队列、树...
    
    算法 Algorithm
        指用函数模板实现的常见算法，如查找、排序、最值、交换、反转...

    迭代器 Iterator
        迭代器是一个对象，能顺序访问容器，但又不暴露它的内部实现，同时为不同的容器提供了一组通用的接口
        标准库中的大多数容器都提供自己的迭代器，其中封装了该容器的遍历机制
        一般可把迭代器理解为 一个用面向对象技术 封装 起来的 "高级指针"

    
典型顺序容器-vector
    vector 表示的是动态数组
    vector 在插入元素时，会根据情况，自动扩容，但注意不是每次插入都会扩大！
    在数据规模已知的情况下，可以进行预先分配存储空间(reserve)，以减少内存重新分配的次数，提高效率。
    在插入或删除元素时，可能会导致迭代器失效。如 扩容后，原来记录的迭代器都会失效！
    原则上在数组的任何位置都可以插入和删除，但一般建议在末尾插入和删除
        在末尾插入有两种做法：
            push_back
            emplace_back(c++11)

        删除可以使用pop_back，也可以使用erase函数
            erase函数返回的是被删除元素后面那个元素的迭代器

    如果容器中存放的是自定义类型的对象，一般要求自定义类型提供一些运算符重载函数，如小于号，输出运算符




典型的关联容器-map
    map称为映射容器，底层使用红黑树(二叉树的一种)实现，对元素的查找效率较高，查找时间复杂度O(logN)
    map中存储的元素称为键值对，C++标准库中使用pair类型来表示键值对，一般定义如下：
    template<typename T1, typename T2>
    struct pair
    {
        T1 first;
        T2 second;
    };
    map自动对其中的元素按键排序，默认使用标准库中的函数对象less进行比较(即<号)，键必须唯一，即键不允许修改，但值可以修改。
    如果键值对中的键是自定义类型，则要求该类型必须实现 运算符<



智能指针    
    C++11中一共有4种智能指针
    unique_ptr
        独占式智能指针，即同一时刻只允许一个指针使用它管理的对象
        当智能指针对象销毁时，会自动释放它所管理的资源
        不允许拷贝，但支持移动
        使用示例：
        std::unique_ptr<Student> p = std::make_unique<Student>("guanyu", 90);
        p->print();
    shared_ptr
        共享式智能指针，即同一时刻允许多个指针使用它管理的对象
        允许拷贝，当shared_ptr拷贝时，内部的引用计数器+1
        当智能指针对象销毁时，内部的引用计数器-1，当引用计数器归0时，自动释放它所管理的资源
        使用示例：
            std::shared_ptr<Student> p2 = std::make_shared<Student>("liubei", 85);
            cout << "use_count: " << p2.use_count();
            p2->print();
    
    weak_ptr
        弱智能指针，必须配合shared_ptr使用，用来解决shared_ptr使用过程中的一些特殊情况：
        1、用于跟踪一个对象的生命周期，确保只有在对象存在时使用它
        2、打破shared_ptr可能的环状引用

    auto_ptr
        自动智能指针，C++17中被移除，不推荐使用。

