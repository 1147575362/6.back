C++是一种综合的编程语言，支持多种编程风格
    面向过程
    面向对象
    泛型编程

1、面向过程和面向对象
    面向过程和面向对象是解决问题的思想(方法)，这些思想指导我们去分析问题、解决问题

    面向过程 
        面向过程是一种底层的机器思维
        当碰到问题时，先分析问题的解决步骤，然后用函数把这些步骤一一实现，最后依次调用这些函数，问题得以解决。
        例：在开发板的屏幕上绘制图形
            1、打开屏幕
            2、映射屏幕
            3、绘制图形
            4、释放资源

    面向对象
        面向对象是一种上层的人类思维
        当碰到问题时，先分析问题中的各种概念，再创建具体的对象，最后给对象发消息，使得各对象或单完完成任务或与其他对象协作完成任务
        我们描述概念、创建对象的目的不是为了完成某个步骤，而是为了描述某个事物在解决问题的过程中所具有的功能。
        例：在开发板的屏幕上绘制图形
        1、描述开发板的屏幕
        2、描述图形
        3、创建屏幕对象、图形对象
        4、给屏幕对象发消息，绘制指定的图形 

    
    面向对象这种思想有三大核心特征：
        封装
        继承
        多态
    

2、面向对象编程    
    面向对象方法有一个最核心的语法工具：class(类)

    类 class 
        类就是类型，用于描述现实世界中那些复杂的概念，描述了同一类事物的共同属性和行为
        一般用数据来描述事物的属性，用函数来描述事物的行为
        class的一般形式：
        class 类名 
        {
            属性
            行为
        };
        描述事物属性的变量，称为成员变量
        描述事物行为的函数，称为成员函数/成员方法
        例： 
        class Student
        {
            int id;
            string name;
            double score;

            void speak() {}
            void coding() {}
        };

        Student s1; // 用自定义的类类型定义变量，一般称为实例化对象

    对象 object
        从编程的角度来说，类类型的变量，就是对象，对象中封装了它的属性和行为
        从面向对象方法论来说，一切皆对象。


    访问修饰符：决定了对象属性和行为的访问权限
        private     私有的，表示对外隐藏，外界不能直接访问，但其朋友可直接访问
        public      公有的，表示对象公开，外界可直接访问
        protected   保护的，表示对象外隐藏，外界不能直接访问同，但其后代和朋友可直接访问

    一个类中，访问修饰符出现的次数和顺序，没有要求。

    例： 
        class Student
        {
        private:
            int id;
            string name;
            double score;

        public:
            void speak() {}
            void coding() {}
        };


    作业：
    1、在C++中，struct和class有什么区别？
    2、使用class描述矩形这个概念，要求：
        描述矩形的属性和行为
        并进行测试

    3、预习构造函数和析构函数


3、标准C++类的组成
    头文件：类的声明 
    源文件：类的定义

    例： 
    rect.hpp
        class Rect  // 自定义类型名称首字母建议大写
        {
        public:
            int area() const;
            void setWidth(int w);
            void setHeight(int h);
            int getWidth() const;
            int getHeight() const;
        private:
            int _width; // 宽  // 一般在成员变量名前加m_或_，是为了表达这是成员变量
            int _height;// 高
        };
    
    rect.cpp 
        int Rect::area() const  // 类外定义成员函数，需要指明作用域，如Rect::
        {
            return _width * _height;
        }

        void Rect::setWidth(int w)
        {
            _width = w;
        }

    说明：
        如果需要使用一个已有的class类型，一般的步骤：
            1、包含该类的头文件
            2、使用该类型实例化对象
            3、给对象发消息(即调用对象的成员函数)

        对于类的成员函数，如果该函数保证不修改对象的状态，则一般建议设置为const函数，如下：
        class 类名 
        {
        public:
            返回类型 函数名(参数列表) const ;
        };
        成员函数后的const属于参数列表的一部分，声明的时候要写，定义的时候也要写。
        这种函数可称为 常成员函数(只读成员函数)。



    练习：
        编写点类型(Point)
        编写颜色类型(Color)


4、构造函数 
    功能：用于对象成员的初始化
    特点：
        构造函数的名字必须与类名相同
        构造函数没有返回类型，只有函数名、参数列表及函数体
        当实例化对象时，自动调用
        如果类中没有显式的声明构造函数，编译器会自动合成
    例： 
        class Point 
        {
        public:
            Point();            // 默认构造函数
            Point(int x, int y);// 带参数的构造函数
        private:
            int x;
            int y;
        };  

        Point p1; // 实例化对象时，自动调用 Point()
        Point p2(100,200); // 自动调用 Point(int,int)

    说明： 
        原则上来说，构造函数在实例化对象时自动调用
        但是，也可以显式的直接调用构造函数，以创建临时对象，如：
            构造函数名(实参)
        临时对象没有名字，用完即销毁，常用于函数传参。

        Point p4(); // 这是函数声明，不是实例化对象
        C++11中引入了统一初始化的方式，使用大括号：
        类名  对象名{实参};
        类名{实参};
        如果编译器版本较低，可以尝试添加编译选项 -std=c++11




5、构造函数的成员初始化列表
    所谓成员初始化列表，就是指在定义构造函数时，在参数列表后面以冒号引导，接 成员名(初值)
    如果有多个成员需要初始化，以逗号隔开即可。
    一般如下：
    构造函数名(参数列表): 成员1(初值), ..., 成员n(初值)
    {
        函数体
    }
    例： 
        Rect(int w, int h): _width(w), _height(h) {}
        Rect(int w, int h, int x, int y): _width(w), _height(h), _pos(x, y) {}
        Rect(int w, int h, Point pos): _width(w), _height(h), _pos(pos) {}

    以下情况，必须使用成员初始化列表：
    1、成员是常量
    2、成员是引用
    3、如果成员是其它类型的对象，且没有默认构造函数
    4、继承时，初始化继承来的成员(下回分解)

    说明： 
        一般建议优先使用初始化列表，因为这种方式效率更高，代码更简洁
        初始化列表中成员的位置与它们的初始化顺序无关，初始化顺序与成员的声明顺序相关。


6、析构函数
    功能： 用于释放对象所占用的资源
    特点：
        析构函数名称与类名相似，由~加类名组成
        没有返回类型，只有函数名、参数列表及函数体，且参数列表必须为空
        当对象销毁时，自动调用
        如果类中没有显式的声明析构函数，编译器会自动合成
    一般形式如下：
        ~类名() 
        {

        }
    例： 
        class Point 
        {
        public:
            Point();            // 默认构造函数
            Point(int x, int y);// 带参数的构造函数
            ~Point();           // 析构函数 
        private:
            int x;
            int y;
        };  

        int main()
        {
            Point p1; // 当p1离开它的作用域，就会自动销毁，在销毁之前自动调用析构函数
        }


    练习： 
        验证临时对象的生命周期

    
    练习： 
        在开发板的屏幕上绘制矩形

        int main()
        {
            Rect rect(100, 200, Point(100, 100));
            Lcd lcd("/dev/fb0");
            rect.draw(lcd);
            
        }

    class Color 
    {
    行为：
        构造函数 
        获取颜色的值
    属性：
        r 
        g 
        b
    };

    class Lcd 
    {
    行为： 
        构造函数 
        析构函数
        绘制点

    属性：
        名字
        文件描述符
        映射地址
        宽
        高
        位深
    };

    class Rect 
    {
    public:
        void draw(Lcd& lcd);
    };


7、类型转换
    C++中提供了四种新的类型转换的方式
    
    static_cast<目标类型>(表达式)
        用于int和char、double、enum等之间的转换
        用于void*和其他指针之间的转换
        用于基类与派生类之间的转换

    const_cast<目标类型>(表达式)
        用于移除指针或引用的const属性：
        const 类型* 指针;
        const 类型& 引用;
        
    reinterpret_cast<目标类型>(表达式)
        用于整数与指针之间的转换
        任意类型的指针之间的转换

    dynamic_cast<目标类型>(表达式)
        用于多态类型之间的转换
        下回分解


8、异常处理
    在程序中出现的错误, 可分为：
        编译时错误/语法错误
        运行时错误
    所谓异常，就是指程序运行时的反常行为。

    C++中的异常处理由三部分组成：
        1、异常检测
            用关键字 throw 来告诉用户，程序出现了异常，称为抛出异常
            throw 表达式;
            例： 
            void foo()
            {
                cout << "hello" << endl;
                throw 1;
                cout << "world" << endl;
            }
            说明： 
                如果throw语句执行，则它后面的语句不会再执行
                如果throw语句执行, 会自动在当前作用域查找是否有异常捕获的语句
                    如果没有，则程序流程返回，回到函数调用点，继续查找异常捕获语句，如果还是没有，重复此过程，直到被系统处理
                    如果有，则进行异常捕获，并处理。


        2、异常处理 
            在程序中使用 try...catch...语句来捕获和处理异常
            try
            {
                // 可能抛出异常的代码
            }
            catch (异常声明)
            {
                // 异常处理语句，如退出进程、直接返回、打印错误、重新来一次...
            }
            说明： 
                如果捕获了某个异常，则进行处理，处理完成后，如果程序流程没有返回或结束，则继续执行try...catch...后面的语句，而不是再回到try中
                如果捕获失败，则继续抛出该异常，直到被处理。
                catch语句可以有多个

            例： 
                int main()
                {
                    try
                    {
                        foo();
                    }
                    catch(double d)
                    {
                        cout << "捕获到double类型的异常" << endl;
                        return 1;                            
                    }
                    catch(int a)
                    {
                        cout << "捕获到int类型的异常" << endl;                            
                    }
                    cout << "异常处理完成" << endl;
                    return 0;
                }

        3、C++标准库提供的异常类型
            标准库提供的异常类型定义于头文件 <stdexcept>, 其中常用的如下：
                std::runtime_error      运行时错误
                std::logic_error        逻辑错误
                std::out_of_range       超出范围(越界)
                std::bad_alloc          内存分配失败
            这组异常类型中都有一个成员函数： what
            该函数返回一个const char*类型的异常信息。

            例： 
                void foo()
                {
                    throw std::runtime_error("文件打开失败！");
                }
                int main()
                {
                    foo();
                }

        注：如果是在构造函数中出现运行时错误，建议使用throw语句




9、动态内存管理
    在C++中，对象所占用的内存空间，一般分三种：
        局部对象        栈区
        全局或静态对象  静态存储区
        动态创建的对象  堆区(自由存储区)

    在C语言中使用标准库函数malloc和free来分配和释放动态内存，在C++中可以使用，但不建议使用
    在C++中建议使用new和delete运算符来管理动态内存
        new 用来分配动态内存， delete用来释放动态内存

    格式：
        类型名* 指针名 = new 类型名;
        类型名* 指针名 = new 类型名(初始值);
        类型名* 指针名 = new 类型名[元素个数];
        例： 
        int* p1 = new int;
        *p1 = 100;
        int* p2 = new int(200);
        int* p3 = new int[5];

        Point* p4 = new Point;
        Point* p5 = new Point(100,200);
        Point* p4 = new Point[5];

        delete 指针名;      // 释放单个对象
        delete [] 指针名;   // 释放一组对象，[]里面不用写元素个数

    说明： 
        new 是一个运算符， 不是函数
        new 在分配空间时，会自动计算所需要空间大小，还能同时初始化
        new 成功后，返回相应类型的指针，而不是void*, 如果失败，抛出异常 bad_alloc
        new 在实例化自定义类型的对象时，会自动调用构造函数。
        delete 在释放对象时，会自动调用析构函数

    注： 
        C++11中引入了一个新的字面值 nullptr, 专门用来表示空指针
        它的类型为 nullptr_t 
        建议使用。如果编译器版本较低，请加上编译选项 -std=c++11

    
    练习： 
        在开发板的屏幕上绘制BMP

        int main()
        {
            Lcd lcd("/dev/fb0");

            Rect r(100, 200);
            r.draw(lcd, Color(100,200,100));

            BMP bmp("1.bmp");
            bmp.draw(lcd);
        }

        class BMP 
        {
        public:
            BMP(std::string name);
            ~BMP();
            void draw(Lcd& lcd, int x = 0, int y = 0);
        private:
            int _fd;
            int _width;
            int _height;
            int _bpp;
            unsigned char* _data;
        };

-----------------------------------------------
10、单向链表
    1、定义单链表类型
    2、实例化链表对象
    3、调用对象的方法

    单链表类型：
    class ForwardList
    {
    public:
        ForwardList();              // 构造函数 
        ~ForwardList();             // 析构函数 
        void push_front(int value); // 在头部插入数据
        int front() const;          // 获取第一个元素的值
        void pop_front();           // 删除第一个元素
        bool empty() const;         // 判断链表是否为空
        int size() const;           // 获取元素个数
        int at(int i) const ;       // 获取链表的第i个元素
    private:
        struct Node // 内部类/嵌套类
        {
            int data;           // 表示数据域
            struct Node* next;  // 表示指针域
        };
        Node* _head;             // 头指针
        int _size;               // 表示元素个数
    };

    int main()
    {
        ForwardList list; // 构造一个空的单链表对象
        list.push_front(100); // 把数据插入到链表
        list.push_front(200);
        list.push_front(300);

        // 遍历单链表
        for (int i = 0; i < list.size(); i++)
        {
            cout << list.at(i) << endl;
        }

    }



    目录类型：
        class Dir
        {
        public:
            Dir(std::string path_name);
            ~Dir();
            StringList getFileNames();
        private:
            std::string _path_name;
            DIR* _dirp;
        };


        int main()
        {
            Dir dir("./");
            StringList filenames = dir.getFileNames();
            for (int i = 0; i < filenames.size(); i++)
            {
                cout << filenames.at(i) << endl; //    ./1.cpp
            }
        }
    
-------------------------------------------------------------------------------
11、this指针
    一个类类型的对象 封装了它的属性和行为
    但是在C++中，一个对象的存储空间中只存储了对象的属性，但是该类型的对象的行为，由所有的同类型对象所共享。
    即每个对象有自己的成员变量，但所有的同类型对象共享一份成员函数。
    那么，相同的函数代码如何区分不同的对象？
    在用对象调它的非静态成员函数时，编译器会自动的把该对象的地址，传递给该函数的第一个隐藏的形参，该形参一般如下：
        类型名* const this
        或 
        const 类型名* const this        // 常成员函数中的this

    该函数的创建及传参都由编译器完成，用户只需要使用即可。
    在代码中，一般用this来表示对象的地址或使用*this来表示对象本身。

    所以，在计算一个对象大小时，只需要考虑它的成员变量(与struct类似)，不需要考虑成员函数。


    例外：
        如果一个对象没有任何成员变量，那么它占用多大的存储空间呢？1个字节

    例： 
        class Demo
        {
        public:
            Demo(int value)
            {
                this->value = value;
            }

            void setValue(int value)
            {
                cout << "this = " << this << endl;
                this->value = value;
            }

            int getValue() const
            {
                return this->value;
            }

            Demo& self()
            {
                return *this; // *this表示对象本身
            }
        private:
            int value;
        };

        int main()
        {
            Demo d(1);
            d.self() => 返回的就是d
            sizeof(d) => 4
        }

    测试：
        void Demo::setValue(int value)
        {
            cout << "this = " << this << endl;
            this->value = value;
            this = nullptr; // 语法错误 
            delete this; // 不确定
        }


12、static
    用static说明的成员，称为 静态成员，分为：
        静态成员变量
        静态成员函数
    
    静态成员变量 不属于对象，而是属于类型，同类型的对象之间共享静态成员变量
    由于静态成员变量不属于对象，也就不能用构造函数来初始化，必须在类外单独初始化：
        类型 作用域::静态成员变量名 = 初值;
    在计算对象大小时，也不需要计算静态成员变量。

    静态成员函数 不属于对象，而是属于类型，同类型的对象之间共享静态函数
    静态成员函数  无法访问  非静态的成员变量，即静态成员函数中没有this
    静态成员函数的调用方式：
        对象.静态成员函数(参数列表)
        类名::静态成员函数(参数列表)   // 建议


    练习： 
        写一个圆类型，加上圆周率
        计算圆的面积




13、friend 友元 
    所谓友元，是指类与类或类与函数之间的一种关系。
    友元 授权于 某些函数 或 类，允许它们直接访问当前类的隐藏信息
    友元可分为：
        友元函数 ：该函数可以直接访问本类的隐藏信息，声明方式如下：
            friend 返回类型  函数名(参数列表);
            friend 返回类型  类名::函数名(参数列表);
        友元类 : 该类中所有的成员函数都可以访问本类的隐藏信息。声明方式如下：
            friend class 类名;

    注： 
        友元声明 只要出现在类中即可，随便类的哪个位置
        可以在类中定义友元函数，但它不是类的成员
        友元关系是单向的
        友元关系是不可传递的。

    例： 
        class Demo 
        {
        public:
            friend void print_x(Demo d); // Demo类有一个朋友，它是一个函数，它能直接访问Demo类对象的x
            Demo(int x): x(x) {}
        private:
            int x;
        };

        void print_x(Demo d)
        {
            cout << d.x << endl;
        }



14、拷贝构造函数 copy constructor
    如果一个构造函数的参数 是 本类类型的const引用，则这种构造函数就称为拷贝构造函数
    一般形式如下：
    class 类名 
    {
    public:
        类名(const 类名& ); // 拷贝构造函数
    };
    如果一个类中没有显式的定义拷贝构造函数，编译器自动生成
    默认生成的拷贝构造函数 执行 逐成员 的拷贝对象。
    例： 
    class Demo
    {
    public:
        Demo(int x, int y): x(x), y(y) {}
        Demo(const Demo& rhs): x(rhs.x), y(rhs.y), p(rhs.p)
        {
            // 拷贝构造函数
        }
    private:
        int x;
        int y;
        int *p;
    };

    Demo d1(1,2);
    Demo d2 = d1; // d2.x = d1.x, d2.y = d1.y, d2.p = d1.p 

    拷贝构造函数的调用时机：
        1、用一个已经存在的对象 初始化一个 新对象
            Demo d1;
            Demo d2(d1);
            Demo d3 = d1;
        2、把一个对象以值的形式传递给函数
            void foo(Demo d4);
            foo(d1); // Demo d4 = d1

        3、从函数中返回一个对象的值
            Demo bar()
            {
                Demo d5;
                return d5; // Demo tmp = d5;
            }
        说明： 
            从函数中返回一个局部对象的值，编译器可能会做优化处理，省略掉拷贝构造函数的调用


    深拷贝与浅拷贝
        如果一个类拥有资源，当拷贝该类的对象时，资源重新分配，这种拷贝方式可称为深拷贝
        如果一个类拥有资源，当拷贝该类的对象时，资源没有重新分配，而两个对象共享了同一份资源，这种拷贝方式称为浅拷贝
        编译器默认的拷贝方式就是浅拷贝。



    练习： 
        给lcd类、Forwardlist类添加拷贝构造函数，并测试

15、阻止拷贝
    如果不希望用户使用某个类的拷贝构造函数，在C++11之前，一般的做法：
        手动声明拷贝构造函数，并私有化。

    在C++11中，给以下两个关键字赋予了新的含义
        delete 
            用于删除编译器自动生成的那些函数，如默认构造函数，默认拷贝构造函数
            函数声明 = delete;
            例： 
            class Demo 
            {
            public:
                Demo() = delete;    // 删除默认构造函数
                Demo(const Demo&) = delete; // 删除拷贝构造函数
            };
        default    
            用于告诉编译器生成那些默认的函数
            函数声明 = default;
            例： 
            class Demo 
            {
            public:
                Demo() = default; // 要求编译器自动生成默认构造函数
                Demo(int x) {}; // 自定义构造函数
            };

        
16、对象的移动
    在很多情况下，都会发生对象的拷贝，其中某些情况下，对象拷贝完成后就会被销毁
    在这些情况下，如果不拷贝对象，而是将要销毁的对象资源 移动到 它们本来要拷贝的地方去，则会提高程序的执行效率。

    为了支持对象的移动，C++11引入了 "右值引用" 的概念。
    所谓的右值引用，就是只能绑定到右值的引用。
    通过右值引用，可以将一个对象的资源 转移 到另一个对象中。
    一般格式：
        类型名 && 引用名 = 右值;
    例： 
        int a = 100;
        int& r = a;
        int& r = 100; // error 
        const int& r = 100; // ok 
        int&& r = 100;      // 右值引用

        Demo& r = Demo(100); // error 
        Demo&& r = Demo(100); // 右值引用


    类似于拷贝构造函数用来拷贝对象，同样有移动构造函数用来移动对象
    移动构造函数的参数为 本类的右值引用：
        类名(类名&&);

    少数情况下，编译器自动调用移动构造函数，如 从函数中返回一个对象的值 
    一般情况下，必须能传递右值引用参数，才会调用移动构造函数。
    标准库中提供了一个特殊的函数: move, 它返回一个对象的右值引用。

    例： 
        class Demo 
        {
        public:
            Demo(int n): size(n)
            {
                p = new char[n];
            }
            Demo(const Demo& other):size(other.size)
            {
                p = new char[size];
                for (int i = 0; i < size; i++)
                    p[i] = other.p[i];
            }
            // 移动构造函数 
            Demo(Demo&& other): p(other.p), size(other.size)
            {
                other.p = nullptr;
            }
            ~Demo()
            {
                delete []p;
            }
        private:
            char* p;
            int size;
        };

        Demo foo()
        {
            return Demo(100); // 编译器可能会优化省略移动构造的调用
        }

        int main()
        {
            Demo d1(10);
            Demo d2(d1);
    
            Demo d3 = foo();

            Demo d4 = std::move(d2); // d2是一个左值,move能获取它的右值引用
            d4.print_p();
            // d2没有资源了，不要再去使用它的资源
            d2.print_p();
        }

